                                                      ## SQL Refresher
                                                      
# Structured Query Language (SQL) is the traditional language used to ask databases for information. 
# When you build any application that relies on a database, the app will need to create SQL sentences on the fly and send them to the database engine to retrieve the required information for your app to work.
# Luckily for you, SQL was built with simplicity in mind, and its syntax is supposed to resemble straightforward English sentences to make it easier for programmers to understand.         

# But before explaining the SQL syntax, let's talk about the specific database engine used on our app: MySQL. 
# MySQL stores information in structures called tables. Think of them as any table in a spreadsheet document where you have columns and rows.
# For clarity, let's check one of the tables in use in the current application where the toys are stored:       

1. SELECT * FROM toys;
2. SELECT name, quantity FROM toys;
3. SELECT name, quantity FROM toys WHERE quantity >= 20;


                                                       ## Sending SQL Queries from PHP
                                                       
# Now that we understand how a SELECT statement works, let's see how a PHP application builds and sends such a query to MySQL. 
# Although we are focusing on PHP and MySQL, the same idea generally applies to other programming languages.   

$server="db";
$user="logistics_user";
$pwd="somePass123";
$schema="logistics";

$db=mysqli_connect($server,$user,$pwd,$schema);

# Once the connection is made, we can issue SQL queries using the mysqli_query() function. 
# The first parameter we pass to the function is the connection handler we got before, and the second parameter is a string with our SQL query:

$query="select * from users where id=1";
$elves_rs=mysqli_query($db,$query);


                                              ## Building Dynamic Websites
Example: http://LAB_WEB_URL.p.thmlabs.com/webapp/elf.php?id=2

# Depending on the number you put on the id parameter of the URL, you get served the profile of a different elf.
# Behind the curtains, this works by creating an SQL query that embeds the id parameter value and returns the information on the corresponding elf. 


In code, it would look like this:

$query="select * from users where id=".$_GET['id'];
$elves_rs=mysqli_query($db,$query);

# The first line builds an SQL query by concatenating the $_GET['id'] variable as part of the where clause.
# Note that in PHP, you can access any parameter in the URL as $_GET['name_of_parameter'].
# This query will ask the database for all columns of the table users that correspond to the elf with a specific id.
# The second line sends the query and returns the information of one particular elf as a result set that we store in the $elves_rs variable.
# The rest of the website then parses the result set and renders the page accordingly.


                                          ## SQL Injection (SQLi)
                                          
# The problem with the method shown before is that it takes untrusted input from the user and concatenates it to an SQL query without any questions asked.
#  As seen in the previous day's task, our app should thoroughly validate any input the user sends before using it. If it doesn't, unexpected things may happen.

Example:  

# If the attacker sends the following through the id parameter of the URL:
http://lab_web_url.p.thmlabs.com/webapp/elf.php?id=-1%20OR%20id%20=%204
                                          
# When PHP concatenates "-1 OR id = 4" to our SQL statement, it will end up with this query:
select * from users where id=-1 OR id = 4

# Suddenly, the attacker has injected some SQL syntax that, when concatenated to our original query, ends up serving the data of the elf with id=4 for some weird reason. 
# If we read the resulting query string, we can see that our WHERE clause was modified to filter only the elves that either have id=-1 or id=4. Since the id values used by the database are likely all positive numbers, no elf will match id=-1. 
# Therefore, the database will only return the elf with id=4.


                                          ## Fixing the App With Elf Exploit and Elf Admin
<> Fixing SQLi by Data Type Validation
# One of the easiest and most effective ways to prevent SQL injections is to ensure that any data that the user can manipulate that you are concatenating as part of an SQL statement is actually from the type you expect.
# Elf Exploit should tell you that he successfully injected some SQL via the id parameter of elf.php.

$query="select * from users where id=".$_GET['id'];
$elves_rs=mysqli_query($db,$query);

# The website takes the id parameter from the URL and concatenates it to an SQL query, as shown before.
# We can reasonably assume that the website expects an integer id to be sent.
# To avoid injections, we can convert whatever the user inputs in the id parameter to an integer.
# For this purpose, we will be using the intval() function. This function will take a string and try to convert it into an integer.
# If no valid integer is found on the string, it will return 0, which is also an integer. 
# To clarify this, let's look at some values and how they would be converted:

intval("123") = 123
intval("tryhackme") = 0
intval("123tryhackme") = 123

# Putting this to use, we can modify line 4 of elf.php to look like this:

$query="select * from users where id=".intval($_GET['id']);


<> Fixing SQLi Using Prepared Statements
# While in some cases, you may secure your code with a simple validator, there are situations where you need to allow the user to pass arbitrary strings through a parameter. One example of this can be seen in the search bar of our application.
# Every time a search is done, it gets sent to search-toys.php via the q parameter. If you ask the elves to recheck the application right now, Elf Exploit should have a way to take advantage of a vulnerability in that parameter. 
# If we open search-toys.php in our code editor, we can quickly see that a query is built in lines 4-5:

$query="select * from toys where name like '%".$_GET['q']."%' or description like '%".$_GET['q']."%'";
$toys_rs=mysqli_query($db,$query);

# Here, the q parameter gets concatenated twice into the same SQL sentence. 
# Notice that in both cases, the data in q is wrapped around single quotes, which is how you represent a string in SQL. 
# The problem with having PHP build the query is that the database has no other option but to trust what it is being given. 
# If an attacker somehow injects SQL, PHP will blindly concatenate the injected payload into the query string, and the database will execute it.

# While there are a couple of ways to go about this, the safest bet is to use prepared statements to prevent SQL injections.
# Prepared statements allow you to separate the syntax of your SQL sentence from the actual parameters used on your WHERE clause. 
# Instead of building a single string by concatenation, you will first describe the structure of your SQL query and use placeholders to indicate the position of your query's parameters. 
# You will then bind the parameters to the prepared statement in a separate function call. 


# Instead of providing a single SQL query string, we will send any dynamic parameters separately from the query itself, allowing the database to stick the pieces together securely without depending on PHP or the programmer.
# Let's see how this looks in the code.

# First, we will modify our initial query by replacing any parameter with a placeholder indicated with a question mark (?). 
# This will tell the database we want to run a query that takes two parameters as inputs. The query will then be passed to the mysqli_prepare() function instead of our usual mysqli_query(). 
# mysqli_prepare() will not run the query yet but will indicate to the database to prepare the query with the given syntax. 
# This function will return a prepared statement.

$query="select * from toys where name like ? or description like ?";
$stmt = mysqli_prepare($db, $query);

# To execute our query, MySQL needs to know the value to put on each placeholder we defined before.
# We can use the mysqli_stmt_bind_param() function to attach variables to each placeholder. 
# This function requires you to send the following function parameters:

# The first parameter should be a reference to the prepared statement to which to bind the variables. 
# The second parameter is a string composed of one letter per placeholder to be bound, where letters indicate each variable's data type.
#  Since we want to pass two strings, we put "ss" in the second parameter, where each "s" represents a string-typed variable.
# You can also use the letters "i" for integers or "d" for floats. You can check the full list in PHP's documentation(https://www.php.net/manual/en/mysqli-stmt.bind-param.php).
# After that, you will need to pass the variables themselves. You must add as many variables as placeholders defined with ? in your query, which in our case, are two.
# Notice that, in our example, both parameters have the same content, but in other cases, it may not be so.

# The resulting code for this would be as follows:

$q = "%".$_GET['q']."%";
mysqli_stmt_bind_param($stmt, 'ss', $q, $q);

# Once we have created a statement and bound the required parameters, we will execute the prepared statement using mysqli_stmt_execute(), which receives the statement $stmt as its only parameter.

mysqli_stmt_execute($stmt);

# Finally, when a statement has been executed, we can retrieve the corresponding result set using the mysqli_stmt_get_result(), passing the statement as the only parameter. 
# We'll assign the result set to the $toys_rs variable as in the original code.

$toys_rs=mysqli_stmt_get_result($stmt);

# Our final resulting code should look like this:

$q = "%".$_GET['q']."%";
$query="select * from toys where name like ? or description like ?";
$stmt = mysqli_prepare($db, $query);
mysqli_stmt_bind_param($stmt, 'ss', $q, $q);
mysqli_stmt_execute($stmt);
$toys_rs=mysqli_stmt_get_result($stmt);


                                          
                                          
                                          
                                          
                                          
                                          
                                          
                                              
                                              
                                              
                                              
                                              
                                              
                                              
                                              
                                              
                                              
                                              
                                              
                                              
                                              
                                              
                                              
