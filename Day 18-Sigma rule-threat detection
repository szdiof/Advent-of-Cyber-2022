                                                            ## Threat Detection
                                                            
# Cyber threats and criminals have advanced tactics to ensure that they steal information and cause havoc. 
# As you have already seen through the previous days, there are many ways in which this can be done. 
# There are also ways for security teams to prepare their defences and identify these threats. 
# What would be evident is that most of the blue-team activities will require proactive approaches to analysing different logs, malware and network traffic. 
# This brings about the practice of threat detection.      

                                  
                                                          ## Attack Scenario
<> Chopping Logs with Sigma Rules

# Sigma is an open-source generic signature language developed by Florian Roth & Thomas Patzke to describe log events in a structured format. 
# The format involves using a markup language called YAML, a designed syntax that allows for quick sharing of detection methods by security analysts. 
# The common factors to note about YAML files include the following:

    1.YAML is case-sensitive.
    2.Files should have the .yml extension.
    3.Spaces are used for indentation and not tabs.
    4.Comments are attributed using the # character.
    5.Key-value pairs are denoted using the colon : character.
    6.Array elements are denoted using the dash - character.
       
<> Sigma was developed to satisfy the following scenarios:

    1. To make detection methods and signatures shareable alongside IOCs and Yara rules.
    2. To write SIEM searches that avoid vendor lock-in.
    3. To share signatures with threat intelligence communities.
    4. To write custom detection rules for malicious behaviour based on specific conditions.
                                                          

<> Sigma Rule Syntax

Example: 
                                  title: Scheduled Task Creation
                                  id: 5
                                  status: experimental # experimental, test, stable, deprecated, unsupported.
                                  description:
                                  author:
                                  date:
                                  modified:

                                  logsource: # Outlines target source of the logs based on operating system, service being run, category of logs.
                                    product: windows # windows, linux, macos.
                                    service: sysmon # sshd for Linux, Security for Windows, applocker, sysmon.
                                    category: process_creation # firewall, web, antivirus, process_creation, network_connection, file_access.
                                  detection:
                                    selection:
                                      EventID: 1 # Change me
                                      Image|endswith:
                                      - schtasks.exe 
                                      CommandLine|contains|all:
                                      - schtasks
                                      - /create
                                      - /tn

                                    condition: selection # Action to be taken. Can use condition operators such as OR, AND, NOT when using multiple search identifiers.

                                  falsepositives: # Legitimate services or use.

                                  level:  # informational, low, medium, high or critical.

                                  tags: # Associated TTPs from MITRE ATT&CK
                                    - {attack.tactic} # MITRE Tactic
                                    - {attack.technique} # MITRE Technique 




# Title: Names the rule based on what it is supposed to detect.

# ID: A globally unique identifier that the developers of Sigma mainly use to maintain the order of identification for the rules submitted to the public repository, found in UUID format.

# Status: Describes the stage in which the rule maturity is at while in use. There are five declared statuses that you can use:
        1. Stable: The rule may be used in production environments and dashboards.
        2. Test: Trials are being done to the rule and could require fine-tuning.
        3. Experimental: The rule is very generic and is being tested. It could lead to false results, be noisy, and identify exciting events.
        4. Deprecated: The rule has been replaced and would no longer yield accurate results. 
        5. Unsupported: The rule is not usable in its current state (unique correlation log, homemade fields).

# Description: Provides more context about the rule and its intended purpose. Here, you can be as detailed as possible to provide information about the detected activity.





# Logsource: Describes the log data to be used for the detection. It consists of other optional attributes:
        1. Product: Selects all log outputs of a certain product. Examples are Windows, Apache
        2. Category: Selects the log files written by the selected product. Examples are firewalls, web, and antivirus.
        3. Service: Selects only a subset of the logs. Examples are sshd on Linux or Security on Windows.
        4. Definition: Describes the log source and its applied configurations.


# Detection:  A required field in the detection rule describes the parameters of the malicious activity we need an alert for. The parameters are divided into two main parts:

        1. The search identifiers are the fields and values the detection should search for.
        2. The condition expression - sets the action to be taken on the detection, such as selection or filtering. The critical thing to look out for account creation on Windows is the Event ID associated with user accounts. In this case, Event ID: 4720 was provided for us on the IOC list, which will be our search identifier.

# The search identifiers can be enhanced using different modifiers appended to the field name with the pipe character |. 
# The main type of modifiers are known as Transformation modifiers and comprise the values: contains, endswith, startswith, and all. 
# Some of these modifiers will be vital in writing rules against the other IOCs. 



# FalsePositives: A list of known false positives that may occur based on log data.

# Level: Describes the severity with which the security team should take the activity under the written rule. The attribute comprises five levels: Informational -> Low -> Medium -> High -> Critical

# Tags: Adds information that can be used to categorise the rule. Common tags are associated with tactics and techniques from the MITRE ATT&CK framework. Sigma developers have defined a list of predefined tags.






























































                                                          
                                                          
