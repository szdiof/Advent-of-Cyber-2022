								## Spying on Santa
# Learning Objectives

    1.How data is sent via electrical wires in low-level hardware
    2.Hardware communication protocols
    3.How to analyse hardware communication protocols
    4.Reading USART data from a logic capture
    
<> Welcome to the Matrix
# Hardware hacking is often shrouded in mystery and seen as a super complex topic. 
# While there are a lot of in-depth complex hardware hacking components, getting our feet wet is actually pretty simple. 
# Computers today are incredibly powerful. 
# This allows them to build additional features and safety measures into their communication protocols to ensure that messages are transmitted reliably. 
# Think about the Transmission Control Protocol (TCP), which has multiple redundancies in place! It even sends three full packets just to start its communication!

# In the world of microchips, we often don't have this luxury. 
# To make sure our communication protocols are efficient as possible, we need to keep them as simple as possible. 
# To do that, we need to enter the world of 0s and 1s. 
# This then begs the question, how does hardware take electricity and generate signals? In this task, we will focus on digital communication. 
# For hardware communication, we use a device called a Logic Analyser to analyse the signals. 
# This device can be connected to the actual electrical wires that are used for communication between two devices that will capture and interpret the signals being sent. 
# In this task, we will use a logic analyser to determine the communication between two devices in the rogue implant

<> The Electrical Heartbeat

# Back to our question, if we have electricity, how can we generate a digital signal? The approach most hardware components take is to simply turn the power on and off. 
# If the power is on, we are transmitting a digital 1. 
# If the power is off, we are transmitting a digital 0. 
# We call these 1s and 0s bits. To perform communication, we simply turn the power on and off in a specific sequence to transmit a bunch of 0s and 1s. 
# If we send 8 bits, we are sending a single byte! Voila! We have just performed digital hardware communication! These are the wonderful squiggly lines you would see on a logic analyser:


# We can transmit text data by using the ASCII table. 
# Sending the binary representation of each character, we can transmit data! However, it isn't actually just that simple. 
# If we wanted zero effort in our communication, we would need an electrical wire for each 0 or 1 that we wanted to transmit. 
# Considering that a single character is one byte of data (thus 8 electrical wires), this can become a mess of wires really fast! To make this more efficient, we need to use fewer wires and then have both hardware chips agree to a specific digital protocol and configuration that will be used to transmit data. 
# Let's look at some of the most common protocols and how they work to send data still while reducing the number of wires we need.


<> USART
# Universal Synchronous/Asynchronous Receiver-Transmitter (USART) communication, or as it is better known, serial communication, is a protocol that uses two wires. 
# One wire is used to transmit (TX) data from device A to device B, and the other wire is used to receive (RX) data on device A from device B. 
# In essence, we connect the transmit port from one device to the receive port from the other device and vice versa.

What is interesting about this protocol is that there is no clock line that synchronises the communication of the devices. Without a clock, the devices have to agree to the configuration of communication, such as the following:

    1. Communication speed - This is also called the baud rate or bit rate and dictates how fast bytes of data can be sent. Agreeing to a specific rate tells each device how fast it should sample the data to get accurate communication. While there are fixed standards for baud rates, devices can choose to use any other rate as long as both devices support it.
    2. Bits per transmission - This is normally set to 8 bits which makes a byte, but it can be configured to something else, such as 16 bits.
    Stop and Start bits - Since there is no clock, one device has to send a signal to the other device before it can send or end a data transmission. The configuration of the start and stop bits dictate how this is done.
    3. Parity bits - Since there can be errors in the communication, parity bits can be used to detect and correct such errors in the transmission. 
    
1. There are a couple of caveats, however. 
2. The devices don't really have a way to determine if the other device is ready for communication. 
3. To solve this, some USART connections will use two additional lines called Clear To Send (CTS) and Request to Send (RTS) to communicate to the other device whether it is ready to receive or ready to transmit. 
4. Furthermore, to agree upon what voltage level is a binary 1 or 0, a third wire called the Ground (GND) wire is required to allow the devices to have the same voltage reference.

# However, despite all of this, USART is an incredibly popular protocol in microprocessors due to its simplicity. 

<> SPI
# The Serial Peripheral Interface (SPI) communication protocol is mainly used for communication between microprocessors and small peripherals such as a sensor or an SD card. 
# While USART communication has the clock built into the TX and RX lines, SPI uses a separate clock wire. 
# Separating the clock (SCK) from the data (DATA) line allows for synchronous communication, which is faster and more reliable. So the trade-off is adding an additional wire, but we gain a speed and reliability boost. 

# The clock line tells the receiving device exactly when it needs to read the data line. 
# Two-way communication is also possible, but quite a bit more complex than serial communication. 
# Essentially, one of the devices is labelled the controller. 
# This is the only device that is allowed to send clock signals. 
# All other devices become secondary devices that must follow the controller's clock signal to transmit data back. 
# If two-way communication is used, instead of having a single data line, two lines are used, namely Peripheral-In Controller-Out (PICO), which means communication is sent from the controller, and Peripheral-Out Controller-In (POCI), which means communication is sent from the secondary device back to the controller. 

# There is one additional change that can be made. While there can only be one controller, there can be multiple secondary devices. 
# To save wires and ports, all devices can use the same SCK, PICO, and POCI lines. 
# A fourth wire, called the Chip Select (CS) wire, is used to distinguish the device that the communication is meant for. 
# The controller can use this line to indicate to the specific device that it wants to communicate to it, as shown in the diagram below:

# SPI communication is a fair bit more complex than USART, but having a dedicated clock line increases the speed at which we can communicate and improves reliability.

<> I2C
# The Inter-Integrated Circuit (I2C) communication protocol was created to deal with the drawbacks of both the USART and SPI communication protocols. 
# Because USART is asynchronous and has the clock built into the transmit and receive lines, devices have to agree ahead of time on the configuration of communication. # Furthermore, speeds are reduced to ensure communication remains reliable. 
# On the other hand, while SPI is faster and more reliable, it requires many more wires for communication, and every single additional peripheral requires one more Chip Select wire.

# I2C attempts to solve these problems. 
# Similar to USART, I2C only makes use of two lines for communication. 
# I2C uses a Serial Data (SDA) line and Serial Clock (SCL) line for communication. 
# However, instead of using a Chip Select wire to determine which peripheral is being communicated to, I2C uses an Address signal that is sent on the SDA wire. 
# This Address tells all controllers and peripherals which device is trying to communicate and to which device it is trying to communicate to. 
# Once the signal is sent, a Data signal can be used to send the actual communication. 
# To notify other controllers and peripherals that communication is taking place and prevent these devices from talking over each other, a Start and Stop signal is used. 
# Each device can monitor these Start and Stop signals to determine if the lines are busy with communication.



# Since an external clock line is used, communication is still faster and more reliable than USART, and while it is slightly slower than SPI, the use of the Address signal means up to 1008 devices can be connected to the same two lines and will be able to communicate.


<> Analysing the Logic
# In order to analyse the logic data dump, we will need to use a logic analyser tool called Saleae(https://www.saleae.com/)
# 
















