								## What is Firmware Reverse Engineering
								
# Every embedded system, such as cameras, routers, smart watches etc., has pre-installed firmware, which has its own set of instructions running on the hardware's processor. 
# It enables the hardware to communicate with other software running on the device. 
# The firmware provides low-level control for the designer/developer to make changes at the root level. 

# Reverse engineering is working your way back through the code to figure out how it was built and what it does. 
# Firmware reverse engineering is extracting the original code from the firmware binary file and verifying that the code does not carry out any malicious or unintended functionality like undesired network communication calls. 
# Firmware reversing is usually done for security reasons to ensure the safe usage of devices that may have critical vulnerabilities leading to possible exploitation or data leakage. 
# Consider a smart watch whose firmware is programmed to send all incoming messages, emails etc., to a specific IP address without any indication to the user.


Firmware Reversing Steps

    1. The firmware is first obtained from the vendor's website or extracted from the device to perform the analysis.
    2. The obtained/extracted firmware, usually a binary file, is first analysed to figure out its type (bare metal or OS based). 
    3. It is verified that the firmware is either encrypted or packed. The encrypted firmware is more challenging to analyse as it usually needs a tricky workaround, such as reversing the previous non-encrypted releases of the firmware or performing hardware attacks like Side Channel Attacks (SCA) to fetch the encryption keys. 
    4. Once the encrypted firmware is decrypted, different techniques and tools are used to perform reverse engineering based on type.
    
								## Type Of Firmware Analysis
# Firmware analysis is carried out through two techniques, Static & Dynamic.

<> Static Analysis
# Static analysis involves an essential examination of the binary file contents, performing its reverse engineering, and reading the assembly instructions to understand the functionality. 
# This is done through multiple commonly used command line utilities and binary analysis tools such as:

    1. BinWalk: A firmware extraction tool that extracts code snippets inside any binary by searching for signatures against many standard binary file formats like zip, tar, exe, ELF, etc. Binwalk has a database of binary header signatures against which the signature match is performed. The common objective of using this tool is to extract a file system like Squashfs, yaffs2, Cramfs, ext*fs, jffs2, etc., which is embedded in the firmware binary. The file system has all the application code that will be running on the device.
    2. Firmware ModKit (FMK): FMK is widely used for firmware reverse engineering. It extracts the firmware using binwalk and outputs a directory with the firmware file system. Once the code is extracted, a developer can modify desired files and repack the binary file with a single command. 
    3. FirmWalker: Searches through the extracted firmware file system for unique strings and directories like etc/shadow, etc/passwd, etc/ssl, special keywords like admin, root, password, etc., vulnerable binaries like ssh, telnet, netcat etc.	
    
<> Dynamic Analysis
# Firmware dynamic analysis involves running the firmware code on actual hardware and observing its behaviour through emulation and hardware/ software based debugging. One of the significant advantages of dynamic analysis is to analyse unintended network communication for identifying data pilferage. The following tools are also commonly used for dynamic analysis:

    1. Qemu: Qemu is a free and open-source emulator and enables working on cross-platform environments. The tool provides various ways to emulate binary firmware for different architectures like Advanced RISC Machines (ARM), Microprocessors without Interlocked Pipelined Stages (MIPS), etc., on the host system. Qemu can help in full-system emulation or a single binary emulation of ELF (Executable and Linkable Format) files for the Linux system and many different platforms.
    2. Gnu DeBugger (GDB): GDB is a dynamic debugging tool for emulating a binary and inspecting its memory and registers. GDB also supports remote debugging, commonly used during firmware reversing when the target binary runs on a separate host and reversing is carried out from a different host.   							
								
								
								## Shall We Reverse the Firmware? Let's Do It!
Step 1: Verifying Encryption	
# In this step, McSkidy will verify whether the binary firmwarev2.2-encrypted.gpg is encrypted through file entropy analysis. 
# First, change the directory to the bin folder by entering the command cd bin. She will then use the binwalk tool to verify the encryption using the command binwalk -E -N firmwarev2.2-encrypted.gpg.

Step 2: Finding Unencrypted Older Version
# Why was she looking for an older version? Because she wants to find encryption keys that she may use to decrypt the original firmware and reverse engineer it.

Command: ubuntu@machine:-/bin-unsigned$ extract-firmware.sh firmwarev1.0-unsigned 

Step 3: Finding Encryption Keys
The original firmware is gpg protected, which means that we need to find a public, and private key and a paraphrase to decrypt the originally signed firmware. 

Command: ubuntu@machine:~bin-unsigned$ grep -ir key
												
# Bingo! We have the public and private keys, but what about the paraphrase usually used with the private key to decrypt a gpg encrypted file?

Command: ubuntu@machine:~bin-unsigned$ grep -ir paraphrase	

Step 4: Decrypting the Encrypted Firmware
# Now that we have the keys, let's import them using the following command:

Command: ubuntu@machine:~bin-unsigned$ gpg --import fmk/rootfs/gpg/private.key 

# While importing the private key, you will be asked to enter the paraphrase. Enter the one you found in Step 3.

Command: ubuntu@machine:~bin-unsigned$ gpg --import fmk/rootfs/gpg/public.key 

# We can list the secret keys.

Command: ubuntu@machine:~bin-unsigned$ gpg --list-secret-keys

# Once the keys are imported, McSkidy decrypts the firmware using the gpg command

Command: ubuntu@machine:~bin$ gpg firmwarev2.2-encrypted.gpg

After decryption, once you issue the ls command, the decrypted file result will look like the following:
Terminal

           
ubuntu@machine:~bin$ ls -lah

-rw-rw-r-- 1 test test 3.9M Dec  7 19:10 firmwarev2.2-encrypted
-rw-rw-r-- 1 test test 3.6M Dec  1 05:45 firmwarev2.2-encrypted.gpg

        


 Step 5: Reversing the Original Encrypted Firmware
 # This is the simplest step, and we can use binwalk or FMK to extract code from the recently unencrypted firmware. In this example, we will be using FMK to extract the code.
 
 Command: ubuntu@machine:~bin$ extract-firmware.sh firmwarev2.2-encrypted
 
 














							
								
								
								
								
								
								
								
								
								
								
								
																						    
