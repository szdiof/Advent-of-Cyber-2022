                                                ## What is a Blockchain?
                                                
# One of the most recently innovated and discussed technologies is the blockchain and its impact on modern computing.
# While historically, it has been used as a financial technology, it's recently expanded into many other industries and applications.
# Informally, a blockchain acts as a database to store information in a specified format and is shared among members of a network with no one entity in control.
# By definition, a blockchain is a digital database or ledger distributed among nodes of a peer-to-peer network.
# The blockchain is distributed among " A smart contract's fields or information should be private and only accessed or modified from functions defined in the contract.peers" or members with no central servers, hence "decentralized."
# Due to its decentralized nature, each peer is expected to maintain the integrity of the blockchain.
# If one member of the network attempted to modify a blockchain maliciously, other members would compare it to their blockchain for integrity and determine if the whole network should express that change.
# But what does this mean for security? If we ignore the core blockchain technology itself, which relies on cryptography, and instead focus on how data is transferred and negotiated, we may find the answer concerning.


                                              ## Introduction to Smart Contracts
                                              
# A majority of practical applications of blockchain rely on a technology known as a smart contract.
# Smart contracts are most commonly used as the backbone of DeFi applications (Decentralized Finance applications) to support a cryptocurrency on a blockchain.
# DeFi applications facilitate currency exchange between entities; a smart contract defines the details of the exchange.
# A smart contract is a program stored on a blockchain that runs when pre-determined conditions are met.
# Smart contracts are very comparable to any other program created from a scripting language.

                                    
                                            ## Functionality of a Smart Contract
                                            
# Before diving deeper into a contract's functionality, let's imagine a contract was a class.
# Depending on the fields or information stored in a class, you may want individual fields to be private, preventing access or modification unless conditions are met.
# A smart contract's fields or information should be private and only accessed or modified from functions defined in the contract.
# A contract commonly has several functions that act similarly to accessors and mutators, such as checking balance, depositing, and withdrawing currency.
# Once a contract is deployed on a blockchain, another contract can then use its functions to call or execute the functions we just defined above.

Example: 
1. If we controlled Contract A and Contract B wanted to first deposit 1 Ethereum, and then withdraw 1 Ethereum from Contract A,
2. Contract B calls the deposit function of Contract A.
3. Contract A authorizes the deposit after checking if any pre-determined conditions need to be met.
4. Contract B calls the withdraw function of Contract A.
5. Contract A authorizes the deposit if the pre-determined conditions for withdrawal are met.
6. Contract B can execute other functions after the Ether is sent from Contract A but before the function resolves.


                                                          ## How do Vulnerabilities in Smart Contracts Occur?
#                                                           
                                                          
                                                          
                                                          
                                                          
                                                          
